// Code generated by ent, DO NOT EDIT.

package customer

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomerName holds the string denoting the customer_name field in the database.
	FieldCustomerName = "customer_name"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldIDCurrency holds the string denoting the id_currency field in the database.
	FieldIDCurrency = "id_currency"
	// FieldIDCountry holds the string denoting the id_country field in the database.
	FieldIDCountry = "id_country"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// FieldAbKey holds the string denoting the ab_key field in the database.
	FieldAbKey = "ab_key"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldTmcClientNumber holds the string denoting the tmc_client_number field in the database.
	FieldTmcClientNumber = "tmc_client_number"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// EdgeInvoices holds the string denoting the invoices edge name in mutations.
	EdgeInvoices = "invoices"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// Table holds the table name of the customer in the database.
	Table = "customer"
	// InvoicesTable is the table that holds the invoices relation/edge.
	InvoicesTable = "invoice"
	// InvoicesInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoicesInverseTable = "invoice"
	// InvoicesColumn is the table column denoting the invoices relation/edge.
	InvoicesColumn = "id_customer"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "payment_received"
	// PaymentsInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentsInverseTable = "payment_received"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "id_customer"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldCustomerName,
	FieldAccountNumber,
	FieldIDCurrency,
	FieldIDCountry,
	FieldAlias,
	FieldAbKey,
	FieldState,
	FieldTmcClientNumber,
	FieldTag,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	AccountNumberValidator func(string) error
	// DefaultIDCurrency holds the default value on creation for the "id_currency" field.
	DefaultIDCurrency int
	// DefaultIDCountry holds the default value on creation for the "id_country" field.
	DefaultIDCountry int
	// AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	AliasValidator func(string) error
	// AbKeyValidator is a validator for the "ab_key" field. It is called by the builders before save.
	AbKeyValidator func(string) error
	// TmcClientNumberValidator is a validator for the "tmc_client_number" field. It is called by the builders before save.
	TmcClientNumberValidator func(string) error
)

// Tag defines the type for the "tag" enum field.
type Tag string

// Tag3 is the default value of the Tag enum.
const DefaultTag = Tag3

// Tag values.
const (
	Tag1 Tag = "1"
	Tag2 Tag = "2"
	Tag3 Tag = "3"
)

func (t Tag) String() string {
	return string(t)
}

// TagValidator is a validator for the "tag" field enum values. It is called by the builders before save.
func TagValidator(t Tag) error {
	switch t {
	case Tag1, Tag2, Tag3:
		return nil
	default:
		return fmt.Errorf("customer: invalid enum value for tag field: %q", t)
	}
}

// OrderOption defines the ordering options for the Customer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCustomerName orders the results by the customer_name field.
func ByCustomerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerName, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByIDCurrency orders the results by the id_currency field.
func ByIDCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCurrency, opts...).ToFunc()
}

// ByIDCountry orders the results by the id_country field.
func ByIDCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCountry, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByAbKey orders the results by the ab_key field.
func ByAbKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbKey, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByTmcClientNumber orders the results by the tmc_client_number field.
func ByTmcClientNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTmcClientNumber, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByInvoicesCount orders the results by invoices count.
func ByInvoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvoicesStep(), opts...)
	}
}

// ByInvoices orders the results by invoices terms.
func ByInvoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInvoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
	)
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
	)
}
