// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naelcodes/ab-backend/ent/customer"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/payment"
	"github.com/naelcodes/ab-backend/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCustomerName sets the "customer_name" field.
func (cu *CustomerUpdate) SetCustomerName(s string) *CustomerUpdate {
	cu.mutation.SetCustomerName(s)
	return cu
}

// SetNillableCustomerName sets the "customer_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerName(*s)
	}
	return cu
}

// SetAccountNumber sets the "account_number" field.
func (cu *CustomerUpdate) SetAccountNumber(s string) *CustomerUpdate {
	cu.mutation.SetAccountNumber(s)
	return cu
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAccountNumber(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAccountNumber(*s)
	}
	return cu
}

// SetIDCurrency sets the "id_currency" field.
func (cu *CustomerUpdate) SetIDCurrency(i int) *CustomerUpdate {
	cu.mutation.ResetIDCurrency()
	cu.mutation.SetIDCurrency(i)
	return cu
}

// SetNillableIDCurrency sets the "id_currency" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIDCurrency(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetIDCurrency(*i)
	}
	return cu
}

// AddIDCurrency adds i to the "id_currency" field.
func (cu *CustomerUpdate) AddIDCurrency(i int) *CustomerUpdate {
	cu.mutation.AddIDCurrency(i)
	return cu
}

// SetIDCountry sets the "id_country" field.
func (cu *CustomerUpdate) SetIDCountry(i int) *CustomerUpdate {
	cu.mutation.ResetIDCountry()
	cu.mutation.SetIDCountry(i)
	return cu
}

// SetNillableIDCountry sets the "id_country" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIDCountry(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetIDCountry(*i)
	}
	return cu
}

// AddIDCountry adds i to the "id_country" field.
func (cu *CustomerUpdate) AddIDCountry(i int) *CustomerUpdate {
	cu.mutation.AddIDCountry(i)
	return cu
}

// SetAlias sets the "alias" field.
func (cu *CustomerUpdate) SetAlias(s string) *CustomerUpdate {
	cu.mutation.SetAlias(s)
	return cu
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAlias(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAlias(*s)
	}
	return cu
}

// SetAbKey sets the "ab_key" field.
func (cu *CustomerUpdate) SetAbKey(s string) *CustomerUpdate {
	cu.mutation.SetAbKey(s)
	return cu
}

// SetNillableAbKey sets the "ab_key" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAbKey(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAbKey(*s)
	}
	return cu
}

// SetState sets the "state" field.
func (cu *CustomerUpdate) SetState(s string) *CustomerUpdate {
	cu.mutation.SetState(s)
	return cu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableState(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetState(*s)
	}
	return cu
}

// ClearState clears the value of the "state" field.
func (cu *CustomerUpdate) ClearState() *CustomerUpdate {
	cu.mutation.ClearState()
	return cu
}

// SetTmcClientNumber sets the "tmc_client_number" field.
func (cu *CustomerUpdate) SetTmcClientNumber(s string) *CustomerUpdate {
	cu.mutation.SetTmcClientNumber(s)
	return cu
}

// SetNillableTmcClientNumber sets the "tmc_client_number" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableTmcClientNumber(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetTmcClientNumber(*s)
	}
	return cu
}

// SetTag sets the "tag" field.
func (cu *CustomerUpdate) SetTag(c customer.Tag) *CustomerUpdate {
	cu.mutation.SetTag(c)
	return cu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableTag(c *customer.Tag) *CustomerUpdate {
	if c != nil {
		cu.SetTag(*c)
	}
	return cu
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (cu *CustomerUpdate) AddInvoiceIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddInvoiceIDs(ids...)
	return cu
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (cu *CustomerUpdate) AddInvoices(i ...*Invoice) *CustomerUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddInvoiceIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cu *CustomerUpdate) AddPaymentIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddPaymentIDs(ids...)
	return cu
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cu *CustomerUpdate) AddPayments(p ...*Payment) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPaymentIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (cu *CustomerUpdate) ClearInvoices() *CustomerUpdate {
	cu.mutation.ClearInvoices()
	return cu
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (cu *CustomerUpdate) RemoveInvoiceIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveInvoiceIDs(ids...)
	return cu
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (cu *CustomerUpdate) RemoveInvoices(i ...*Invoice) *CustomerUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveInvoiceIDs(ids...)
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cu *CustomerUpdate) ClearPayments() *CustomerUpdate {
	cu.mutation.ClearPayments()
	return cu
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cu *CustomerUpdate) RemovePaymentIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemovePaymentIDs(ids...)
	return cu
}

// RemovePayments removes "payments" edges to Payment entities.
func (cu *CustomerUpdate) RemovePayments(p ...*Payment) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.AccountNumber(); ok {
		if err := customer.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "Customer.account_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Alias(); ok {
		if err := customer.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Customer.alias": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AbKey(); ok {
		if err := customer.AbKeyValidator(v); err != nil {
			return &ValidationError{Name: "ab_key", err: fmt.Errorf(`ent: validator failed for field "Customer.ab_key": %w`, err)}
		}
	}
	if v, ok := cu.mutation.TmcClientNumber(); ok {
		if err := customer.TmcClientNumberValidator(v); err != nil {
			return &ValidationError{Name: "tmc_client_number", err: fmt.Errorf(`ent: validator failed for field "Customer.tmc_client_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Tag(); ok {
		if err := customer.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Customer.tag": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CustomerName(); ok {
		_spec.SetField(customer.FieldCustomerName, field.TypeString, value)
	}
	if value, ok := cu.mutation.AccountNumber(); ok {
		_spec.SetField(customer.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.IDCurrency(); ok {
		_spec.SetField(customer.FieldIDCurrency, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIDCurrency(); ok {
		_spec.AddField(customer.FieldIDCurrency, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IDCountry(); ok {
		_spec.SetField(customer.FieldIDCountry, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIDCountry(); ok {
		_spec.AddField(customer.FieldIDCountry, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Alias(); ok {
		_spec.SetField(customer.FieldAlias, field.TypeString, value)
	}
	if value, ok := cu.mutation.AbKey(); ok {
		_spec.SetField(customer.FieldAbKey, field.TypeString, value)
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.SetField(customer.FieldState, field.TypeString, value)
	}
	if cu.mutation.StateCleared() {
		_spec.ClearField(customer.FieldState, field.TypeString)
	}
	if value, ok := cu.mutation.TmcClientNumber(); ok {
		_spec.SetField(customer.FieldTmcClientNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.Tag(); ok {
		_spec.SetField(customer.FieldTag, field.TypeEnum, value)
	}
	if cu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !cu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetCustomerName sets the "customer_name" field.
func (cuo *CustomerUpdateOne) SetCustomerName(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerName(s)
	return cuo
}

// SetNillableCustomerName sets the "customer_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerName(*s)
	}
	return cuo
}

// SetAccountNumber sets the "account_number" field.
func (cuo *CustomerUpdateOne) SetAccountNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetAccountNumber(s)
	return cuo
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAccountNumber(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAccountNumber(*s)
	}
	return cuo
}

// SetIDCurrency sets the "id_currency" field.
func (cuo *CustomerUpdateOne) SetIDCurrency(i int) *CustomerUpdateOne {
	cuo.mutation.ResetIDCurrency()
	cuo.mutation.SetIDCurrency(i)
	return cuo
}

// SetNillableIDCurrency sets the "id_currency" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIDCurrency(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetIDCurrency(*i)
	}
	return cuo
}

// AddIDCurrency adds i to the "id_currency" field.
func (cuo *CustomerUpdateOne) AddIDCurrency(i int) *CustomerUpdateOne {
	cuo.mutation.AddIDCurrency(i)
	return cuo
}

// SetIDCountry sets the "id_country" field.
func (cuo *CustomerUpdateOne) SetIDCountry(i int) *CustomerUpdateOne {
	cuo.mutation.ResetIDCountry()
	cuo.mutation.SetIDCountry(i)
	return cuo
}

// SetNillableIDCountry sets the "id_country" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIDCountry(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetIDCountry(*i)
	}
	return cuo
}

// AddIDCountry adds i to the "id_country" field.
func (cuo *CustomerUpdateOne) AddIDCountry(i int) *CustomerUpdateOne {
	cuo.mutation.AddIDCountry(i)
	return cuo
}

// SetAlias sets the "alias" field.
func (cuo *CustomerUpdateOne) SetAlias(s string) *CustomerUpdateOne {
	cuo.mutation.SetAlias(s)
	return cuo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAlias(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAlias(*s)
	}
	return cuo
}

// SetAbKey sets the "ab_key" field.
func (cuo *CustomerUpdateOne) SetAbKey(s string) *CustomerUpdateOne {
	cuo.mutation.SetAbKey(s)
	return cuo
}

// SetNillableAbKey sets the "ab_key" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAbKey(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAbKey(*s)
	}
	return cuo
}

// SetState sets the "state" field.
func (cuo *CustomerUpdateOne) SetState(s string) *CustomerUpdateOne {
	cuo.mutation.SetState(s)
	return cuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableState(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetState(*s)
	}
	return cuo
}

// ClearState clears the value of the "state" field.
func (cuo *CustomerUpdateOne) ClearState() *CustomerUpdateOne {
	cuo.mutation.ClearState()
	return cuo
}

// SetTmcClientNumber sets the "tmc_client_number" field.
func (cuo *CustomerUpdateOne) SetTmcClientNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetTmcClientNumber(s)
	return cuo
}

// SetNillableTmcClientNumber sets the "tmc_client_number" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableTmcClientNumber(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetTmcClientNumber(*s)
	}
	return cuo
}

// SetTag sets the "tag" field.
func (cuo *CustomerUpdateOne) SetTag(c customer.Tag) *CustomerUpdateOne {
	cuo.mutation.SetTag(c)
	return cuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableTag(c *customer.Tag) *CustomerUpdateOne {
	if c != nil {
		cuo.SetTag(*c)
	}
	return cuo
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (cuo *CustomerUpdateOne) AddInvoiceIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddInvoiceIDs(ids...)
	return cuo
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (cuo *CustomerUpdateOne) AddInvoices(i ...*Invoice) *CustomerUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddInvoiceIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cuo *CustomerUpdateOne) AddPaymentIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddPaymentIDs(ids...)
	return cuo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cuo *CustomerUpdateOne) AddPayments(p ...*Payment) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPaymentIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (cuo *CustomerUpdateOne) ClearInvoices() *CustomerUpdateOne {
	cuo.mutation.ClearInvoices()
	return cuo
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (cuo *CustomerUpdateOne) RemoveInvoiceIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveInvoiceIDs(ids...)
	return cuo
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (cuo *CustomerUpdateOne) RemoveInvoices(i ...*Invoice) *CustomerUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveInvoiceIDs(ids...)
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cuo *CustomerUpdateOne) ClearPayments() *CustomerUpdateOne {
	cuo.mutation.ClearPayments()
	return cuo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cuo *CustomerUpdateOne) RemovePaymentIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemovePaymentIDs(ids...)
	return cuo
}

// RemovePayments removes "payments" edges to Payment entities.
func (cuo *CustomerUpdateOne) RemovePayments(p ...*Payment) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.AccountNumber(); ok {
		if err := customer.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "Customer.account_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Alias(); ok {
		if err := customer.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Customer.alias": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AbKey(); ok {
		if err := customer.AbKeyValidator(v); err != nil {
			return &ValidationError{Name: "ab_key", err: fmt.Errorf(`ent: validator failed for field "Customer.ab_key": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.TmcClientNumber(); ok {
		if err := customer.TmcClientNumberValidator(v); err != nil {
			return &ValidationError{Name: "tmc_client_number", err: fmt.Errorf(`ent: validator failed for field "Customer.tmc_client_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Tag(); ok {
		if err := customer.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Customer.tag": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CustomerName(); ok {
		_spec.SetField(customer.FieldCustomerName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AccountNumber(); ok {
		_spec.SetField(customer.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IDCurrency(); ok {
		_spec.SetField(customer.FieldIDCurrency, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIDCurrency(); ok {
		_spec.AddField(customer.FieldIDCurrency, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IDCountry(); ok {
		_spec.SetField(customer.FieldIDCountry, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIDCountry(); ok {
		_spec.AddField(customer.FieldIDCountry, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Alias(); ok {
		_spec.SetField(customer.FieldAlias, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AbKey(); ok {
		_spec.SetField(customer.FieldAbKey, field.TypeString, value)
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.SetField(customer.FieldState, field.TypeString, value)
	}
	if cuo.mutation.StateCleared() {
		_spec.ClearField(customer.FieldState, field.TypeString)
	}
	if value, ok := cuo.mutation.TmcClientNumber(); ok {
		_spec.SetField(customer.FieldTmcClientNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Tag(); ok {
		_spec.SetField(customer.FieldTag, field.TypeEnum, value)
	}
	if cuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !cuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
