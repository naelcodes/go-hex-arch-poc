// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/naelcodes/ab-backend/ent/imputation"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/payment"
)

// Imputation is the model entity for the Imputation schema.
type Imputation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AmountApply holds the value of the "amount_apply" field.
	AmountApply float64 `json:"amount_apply,omitempty"`
	// InvoiceAmount holds the value of the "invoice_amount" field.
	InvoiceAmount float64 `json:"invoice_amount,omitempty"`
	// PaymentAmount holds the value of the "payment_amount" field.
	PaymentAmount float64 `json:"payment_amount,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag imputation.Tag `json:"tag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImputationQuery when eager-loading is set.
	Edges               ImputationEdges `json:"edges"`
	id_invoice          *int
	id_payment_received *int
	selectValues        sql.SelectValues
}

// ImputationEdges holds the relations/edges for other nodes in the graph.
type ImputationEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// Payment holds the value of the payment edge.
	Payment *Payment `json:"payment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImputationEdges) InvoiceOrErr() (*Invoice, error) {
	if e.loadedTypes[0] {
		if e.Invoice == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invoice.Label}
		}
		return e.Invoice, nil
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImputationEdges) PaymentOrErr() (*Payment, error) {
	if e.loadedTypes[1] {
		if e.Payment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: payment.Label}
		}
		return e.Payment, nil
	}
	return nil, &NotLoadedError{edge: "payment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Imputation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imputation.FieldID:
			values[i] = new(sql.NullInt64)
		case imputation.FieldTag:
			values[i] = new(sql.NullString)
		case imputation.FieldAmountApply:
			values[i] = imputation.ValueScanner.AmountApply.ScanValue()
		case imputation.FieldInvoiceAmount:
			values[i] = imputation.ValueScanner.InvoiceAmount.ScanValue()
		case imputation.FieldPaymentAmount:
			values[i] = imputation.ValueScanner.PaymentAmount.ScanValue()
		case imputation.ForeignKeys[0]: // id_invoice
			values[i] = new(sql.NullInt64)
		case imputation.ForeignKeys[1]: // id_payment_received
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Imputation fields.
func (i *Imputation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case imputation.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case imputation.FieldAmountApply:
			if value, err := imputation.ValueScanner.AmountApply.FromValue(values[j]); err != nil {
				return err
			} else {
				i.AmountApply = value
			}
		case imputation.FieldInvoiceAmount:
			if value, err := imputation.ValueScanner.InvoiceAmount.FromValue(values[j]); err != nil {
				return err
			} else {
				i.InvoiceAmount = value
			}
		case imputation.FieldPaymentAmount:
			if value, err := imputation.ValueScanner.PaymentAmount.FromValue(values[j]); err != nil {
				return err
			} else {
				i.PaymentAmount = value
			}
		case imputation.FieldTag:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[j])
			} else if value.Valid {
				i.Tag = imputation.Tag(value.String)
			}
		case imputation.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field id_invoice", value)
			} else if value.Valid {
				i.id_invoice = new(int)
				*i.id_invoice = int(value.Int64)
			}
		case imputation.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field id_payment_received", value)
			} else if value.Valid {
				i.id_payment_received = new(int)
				*i.id_payment_received = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Imputation.
// This includes values selected through modifiers, order, etc.
func (i *Imputation) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the Imputation entity.
func (i *Imputation) QueryInvoice() *InvoiceQuery {
	return NewImputationClient(i.config).QueryInvoice(i)
}

// QueryPayment queries the "payment" edge of the Imputation entity.
func (i *Imputation) QueryPayment() *PaymentQuery {
	return NewImputationClient(i.config).QueryPayment(i)
}

// Update returns a builder for updating this Imputation.
// Note that you need to call Imputation.Unwrap() before calling this method if this Imputation
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Imputation) Update() *ImputationUpdateOne {
	return NewImputationClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Imputation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Imputation) Unwrap() *Imputation {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Imputation is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Imputation) String() string {
	var builder strings.Builder
	builder.WriteString("Imputation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("amount_apply=")
	builder.WriteString(fmt.Sprintf("%v", i.AmountApply))
	builder.WriteString(", ")
	builder.WriteString("invoice_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.InvoiceAmount))
	builder.WriteString(", ")
	builder.WriteString("payment_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.PaymentAmount))
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(fmt.Sprintf("%v", i.Tag))
	builder.WriteByte(')')
	return builder.String()
}

// Imputations is a parsable slice of Imputation.
type Imputations []*Imputation
