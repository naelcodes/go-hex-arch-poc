// Code generated by ent, DO NOT EDIT.

package imputation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/naelcodes/ab-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Imputation {
	return predicate.Imputation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Imputation {
	return predicate.Imputation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Imputation {
	return predicate.Imputation(sql.FieldLTE(FieldID, id))
}

// AmountApply applies equality check predicate on the "amount_apply" field. It's identical to AmountApplyEQ.
func AmountApply(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldEQ(FieldAmountApply, vc), err)
}

// InvoiceAmount applies equality check predicate on the "invoice_amount" field. It's identical to InvoiceAmountEQ.
func InvoiceAmount(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldEQ(FieldInvoiceAmount, vc), err)
}

// PaymentAmount applies equality check predicate on the "payment_amount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldEQ(FieldPaymentAmount, vc), err)
}

// AmountApplyEQ applies the EQ predicate on the "amount_apply" field.
func AmountApplyEQ(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldEQ(FieldAmountApply, vc), err)
}

// AmountApplyNEQ applies the NEQ predicate on the "amount_apply" field.
func AmountApplyNEQ(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldNEQ(FieldAmountApply, vc), err)
}

// AmountApplyIn applies the In predicate on the "amount_apply" field.
func AmountApplyIn(vs ...float64) predicate.Imputation {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.AmountApply.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.ImputationOrErr(sql.FieldIn(FieldAmountApply, v...), err)
}

// AmountApplyNotIn applies the NotIn predicate on the "amount_apply" field.
func AmountApplyNotIn(vs ...float64) predicate.Imputation {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.AmountApply.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.ImputationOrErr(sql.FieldNotIn(FieldAmountApply, v...), err)
}

// AmountApplyGT applies the GT predicate on the "amount_apply" field.
func AmountApplyGT(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldGT(FieldAmountApply, vc), err)
}

// AmountApplyGTE applies the GTE predicate on the "amount_apply" field.
func AmountApplyGTE(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldGTE(FieldAmountApply, vc), err)
}

// AmountApplyLT applies the LT predicate on the "amount_apply" field.
func AmountApplyLT(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldLT(FieldAmountApply, vc), err)
}

// AmountApplyLTE applies the LTE predicate on the "amount_apply" field.
func AmountApplyLTE(v float64) predicate.Imputation {
	vc, err := ValueScanner.AmountApply.Value(v)
	return predicate.ImputationOrErr(sql.FieldLTE(FieldAmountApply, vc), err)
}

// InvoiceAmountEQ applies the EQ predicate on the "invoice_amount" field.
func InvoiceAmountEQ(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldEQ(FieldInvoiceAmount, vc), err)
}

// InvoiceAmountNEQ applies the NEQ predicate on the "invoice_amount" field.
func InvoiceAmountNEQ(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldNEQ(FieldInvoiceAmount, vc), err)
}

// InvoiceAmountIn applies the In predicate on the "invoice_amount" field.
func InvoiceAmountIn(vs ...float64) predicate.Imputation {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.InvoiceAmount.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.ImputationOrErr(sql.FieldIn(FieldInvoiceAmount, v...), err)
}

// InvoiceAmountNotIn applies the NotIn predicate on the "invoice_amount" field.
func InvoiceAmountNotIn(vs ...float64) predicate.Imputation {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.InvoiceAmount.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.ImputationOrErr(sql.FieldNotIn(FieldInvoiceAmount, v...), err)
}

// InvoiceAmountGT applies the GT predicate on the "invoice_amount" field.
func InvoiceAmountGT(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldGT(FieldInvoiceAmount, vc), err)
}

// InvoiceAmountGTE applies the GTE predicate on the "invoice_amount" field.
func InvoiceAmountGTE(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldGTE(FieldInvoiceAmount, vc), err)
}

// InvoiceAmountLT applies the LT predicate on the "invoice_amount" field.
func InvoiceAmountLT(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldLT(FieldInvoiceAmount, vc), err)
}

// InvoiceAmountLTE applies the LTE predicate on the "invoice_amount" field.
func InvoiceAmountLTE(v float64) predicate.Imputation {
	vc, err := ValueScanner.InvoiceAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldLTE(FieldInvoiceAmount, vc), err)
}

// PaymentAmountEQ applies the EQ predicate on the "payment_amount" field.
func PaymentAmountEQ(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldEQ(FieldPaymentAmount, vc), err)
}

// PaymentAmountNEQ applies the NEQ predicate on the "payment_amount" field.
func PaymentAmountNEQ(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldNEQ(FieldPaymentAmount, vc), err)
}

// PaymentAmountIn applies the In predicate on the "payment_amount" field.
func PaymentAmountIn(vs ...float64) predicate.Imputation {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.PaymentAmount.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.ImputationOrErr(sql.FieldIn(FieldPaymentAmount, v...), err)
}

// PaymentAmountNotIn applies the NotIn predicate on the "payment_amount" field.
func PaymentAmountNotIn(vs ...float64) predicate.Imputation {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.PaymentAmount.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.ImputationOrErr(sql.FieldNotIn(FieldPaymentAmount, v...), err)
}

// PaymentAmountGT applies the GT predicate on the "payment_amount" field.
func PaymentAmountGT(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldGT(FieldPaymentAmount, vc), err)
}

// PaymentAmountGTE applies the GTE predicate on the "payment_amount" field.
func PaymentAmountGTE(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldGTE(FieldPaymentAmount, vc), err)
}

// PaymentAmountLT applies the LT predicate on the "payment_amount" field.
func PaymentAmountLT(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldLT(FieldPaymentAmount, vc), err)
}

// PaymentAmountLTE applies the LTE predicate on the "payment_amount" field.
func PaymentAmountLTE(v float64) predicate.Imputation {
	vc, err := ValueScanner.PaymentAmount.Value(v)
	return predicate.ImputationOrErr(sql.FieldLTE(FieldPaymentAmount, vc), err)
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v Tag) predicate.Imputation {
	return predicate.Imputation(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v Tag) predicate.Imputation {
	return predicate.Imputation(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...Tag) predicate.Imputation {
	return predicate.Imputation(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...Tag) predicate.Imputation {
	return predicate.Imputation(sql.FieldNotIn(FieldTag, vs...))
}

// HasInvoice applies the HasEdge predicate on the "invoice" edge.
func HasInvoice() predicate.Imputation {
	return predicate.Imputation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoiceWith applies the HasEdge predicate on the "invoice" edge with a given conditions (other predicates).
func HasInvoiceWith(preds ...predicate.Invoice) predicate.Imputation {
	return predicate.Imputation(func(s *sql.Selector) {
		step := newInvoiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.Imputation {
	return predicate.Imputation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.Imputation {
	return predicate.Imputation(func(s *sql.Selector) {
		step := newPaymentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Imputation) predicate.Imputation {
	return predicate.Imputation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Imputation) predicate.Imputation {
	return predicate.Imputation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Imputation) predicate.Imputation {
	return predicate.Imputation(sql.NotPredicates(p))
}
