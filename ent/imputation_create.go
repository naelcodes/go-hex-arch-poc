// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naelcodes/ab-backend/ent/imputation"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/payment"
)

// ImputationCreate is the builder for creating a Imputation entity.
type ImputationCreate struct {
	config
	mutation *ImputationMutation
	hooks    []Hook
}

// SetAmountApply sets the "amount_apply" field.
func (ic *ImputationCreate) SetAmountApply(f float64) *ImputationCreate {
	ic.mutation.SetAmountApply(f)
	return ic
}

// SetNillableAmountApply sets the "amount_apply" field if the given value is not nil.
func (ic *ImputationCreate) SetNillableAmountApply(f *float64) *ImputationCreate {
	if f != nil {
		ic.SetAmountApply(*f)
	}
	return ic
}

// SetInvoiceAmount sets the "invoice_amount" field.
func (ic *ImputationCreate) SetInvoiceAmount(f float64) *ImputationCreate {
	ic.mutation.SetInvoiceAmount(f)
	return ic
}

// SetNillableInvoiceAmount sets the "invoice_amount" field if the given value is not nil.
func (ic *ImputationCreate) SetNillableInvoiceAmount(f *float64) *ImputationCreate {
	if f != nil {
		ic.SetInvoiceAmount(*f)
	}
	return ic
}

// SetPaymentAmount sets the "payment_amount" field.
func (ic *ImputationCreate) SetPaymentAmount(f float64) *ImputationCreate {
	ic.mutation.SetPaymentAmount(f)
	return ic
}

// SetNillablePaymentAmount sets the "payment_amount" field if the given value is not nil.
func (ic *ImputationCreate) SetNillablePaymentAmount(f *float64) *ImputationCreate {
	if f != nil {
		ic.SetPaymentAmount(*f)
	}
	return ic
}

// SetTag sets the "tag" field.
func (ic *ImputationCreate) SetTag(i imputation.Tag) *ImputationCreate {
	ic.mutation.SetTag(i)
	return ic
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (ic *ImputationCreate) SetNillableTag(i *imputation.Tag) *ImputationCreate {
	if i != nil {
		ic.SetTag(*i)
	}
	return ic
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (ic *ImputationCreate) SetInvoiceID(id int) *ImputationCreate {
	ic.mutation.SetInvoiceID(id)
	return ic
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (ic *ImputationCreate) SetInvoice(i *Invoice) *ImputationCreate {
	return ic.SetInvoiceID(i.ID)
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (ic *ImputationCreate) SetPaymentID(id int) *ImputationCreate {
	ic.mutation.SetPaymentID(id)
	return ic
}

// SetPayment sets the "payment" edge to the Payment entity.
func (ic *ImputationCreate) SetPayment(p *Payment) *ImputationCreate {
	return ic.SetPaymentID(p.ID)
}

// Mutation returns the ImputationMutation object of the builder.
func (ic *ImputationCreate) Mutation() *ImputationMutation {
	return ic.mutation
}

// Save creates the Imputation in the database.
func (ic *ImputationCreate) Save(ctx context.Context) (*Imputation, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImputationCreate) SaveX(ctx context.Context) *Imputation {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImputationCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImputationCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImputationCreate) defaults() {
	if _, ok := ic.mutation.AmountApply(); !ok {
		v := imputation.DefaultAmountApply
		ic.mutation.SetAmountApply(v)
	}
	if _, ok := ic.mutation.InvoiceAmount(); !ok {
		v := imputation.DefaultInvoiceAmount
		ic.mutation.SetInvoiceAmount(v)
	}
	if _, ok := ic.mutation.PaymentAmount(); !ok {
		v := imputation.DefaultPaymentAmount
		ic.mutation.SetPaymentAmount(v)
	}
	if _, ok := ic.mutation.Tag(); !ok {
		v := imputation.DefaultTag
		ic.mutation.SetTag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImputationCreate) check() error {
	if _, ok := ic.mutation.AmountApply(); !ok {
		return &ValidationError{Name: "amount_apply", err: errors.New(`ent: missing required field "Imputation.amount_apply"`)}
	}
	if v, ok := ic.mutation.AmountApply(); ok {
		if err := imputation.AmountApplyValidator(v); err != nil {
			return &ValidationError{Name: "amount_apply", err: fmt.Errorf(`ent: validator failed for field "Imputation.amount_apply": %w`, err)}
		}
	}
	if _, ok := ic.mutation.InvoiceAmount(); !ok {
		return &ValidationError{Name: "invoice_amount", err: errors.New(`ent: missing required field "Imputation.invoice_amount"`)}
	}
	if v, ok := ic.mutation.InvoiceAmount(); ok {
		if err := imputation.InvoiceAmountValidator(v); err != nil {
			return &ValidationError{Name: "invoice_amount", err: fmt.Errorf(`ent: validator failed for field "Imputation.invoice_amount": %w`, err)}
		}
	}
	if _, ok := ic.mutation.PaymentAmount(); !ok {
		return &ValidationError{Name: "payment_amount", err: errors.New(`ent: missing required field "Imputation.payment_amount"`)}
	}
	if v, ok := ic.mutation.PaymentAmount(); ok {
		if err := imputation.PaymentAmountValidator(v); err != nil {
			return &ValidationError{Name: "payment_amount", err: fmt.Errorf(`ent: validator failed for field "Imputation.payment_amount": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Imputation.tag"`)}
	}
	if v, ok := ic.mutation.Tag(); ok {
		if err := imputation.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Imputation.tag": %w`, err)}
		}
	}
	if _, ok := ic.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "Imputation.invoice"`)}
	}
	if _, ok := ic.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "Imputation.payment"`)}
	}
	return nil
}

func (ic *ImputationCreate) sqlSave(ctx context.Context) (*Imputation, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := ic.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImputationCreate) createSpec() (*Imputation, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Imputation{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(imputation.Table, sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.AmountApply(); ok {
		vv, err := imputation.ValueScanner.AmountApply.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(imputation.FieldAmountApply, field.TypeFloat64, vv)
		_node.AmountApply = value
	}
	if value, ok := ic.mutation.InvoiceAmount(); ok {
		vv, err := imputation.ValueScanner.InvoiceAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(imputation.FieldInvoiceAmount, field.TypeFloat64, vv)
		_node.InvoiceAmount = value
	}
	if value, ok := ic.mutation.PaymentAmount(); ok {
		vv, err := imputation.ValueScanner.PaymentAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(imputation.FieldPaymentAmount, field.TypeFloat64, vv)
		_node.PaymentAmount = value
	}
	if value, ok := ic.mutation.Tag(); ok {
		_spec.SetField(imputation.FieldTag, field.TypeEnum, value)
		_node.Tag = value
	}
	if nodes := ic.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imputation.InvoiceTable,
			Columns: []string{imputation.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.id_invoice = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imputation.PaymentTable,
			Columns: []string{imputation.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.id_payment_received = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// ImputationCreateBulk is the builder for creating many Imputation entities in bulk.
type ImputationCreateBulk struct {
	config
	err      error
	builders []*ImputationCreate
}

// Save creates the Imputation entities in the database.
func (icb *ImputationCreateBulk) Save(ctx context.Context) ([]*Imputation, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Imputation, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImputationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImputationCreateBulk) SaveX(ctx context.Context) []*Imputation {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImputationCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImputationCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
