// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/naelcodes/ab-backend/ent/customer"
	"github.com/naelcodes/ab-backend/ent/invoice"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreationDate holds the value of the "creation_date" field.
	CreationDate string `json:"creation_date,omitempty"`
	// InvoiceNumber holds the value of the "invoice_number" field.
	InvoiceNumber string `json:"invoice_number,omitempty"`
	// Status holds the value of the "status" field.
	Status invoice.Status `json:"status,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate string `json:"due_date,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// NetAmount holds the value of the "net_amount" field.
	NetAmount float64 `json:"net_amount,omitempty"`
	// BaseAmount holds the value of the "base_amount" field.
	BaseAmount float64 `json:"base_amount,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// CreditApply holds the value of the "credit_apply" field.
	CreditApply float64 `json:"credit_apply,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag invoice.Tag `json:"tag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges        InvoiceEdges `json:"edges"`
	id_customer  *int
	selectValues sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Imputations holds the value of the imputations edge.
	Imputations []*Imputation `json:"imputations,omitempty"`
	// TravelItems holds the value of the travel_items edge.
	TravelItems []*TravelItem `json:"travel_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ImputationsOrErr returns the Imputations value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) ImputationsOrErr() ([]*Imputation, error) {
	if e.loadedTypes[1] {
		return e.Imputations, nil
	}
	return nil, &NotLoadedError{edge: "imputations"}
}

// TravelItemsOrErr returns the TravelItems value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) TravelItemsOrErr() ([]*TravelItem, error) {
	if e.loadedTypes[2] {
		return e.TravelItems, nil
	}
	return nil, &NotLoadedError{edge: "travel_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldID:
			values[i] = new(sql.NullInt64)
		case invoice.FieldCreationDate, invoice.FieldInvoiceNumber, invoice.FieldStatus, invoice.FieldDueDate, invoice.FieldTag:
			values[i] = new(sql.NullString)
		case invoice.FieldAmount:
			values[i] = invoice.ValueScanner.Amount.ScanValue()
		case invoice.FieldNetAmount:
			values[i] = invoice.ValueScanner.NetAmount.ScanValue()
		case invoice.FieldBaseAmount:
			values[i] = invoice.ValueScanner.BaseAmount.ScanValue()
		case invoice.FieldBalance:
			values[i] = invoice.ValueScanner.Balance.ScanValue()
		case invoice.FieldCreditApply:
			values[i] = invoice.ValueScanner.CreditApply.ScanValue()
		case invoice.ForeignKeys[0]: // id_customer
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (i *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invoice.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case invoice.FieldCreationDate:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creation_date", values[j])
			} else if value.Valid {
				i.CreationDate = value.String
			}
		case invoice.FieldInvoiceNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_number", values[j])
			} else if value.Valid {
				i.InvoiceNumber = value.String
			}
		case invoice.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = invoice.Status(value.String)
			}
		case invoice.FieldDueDate:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[j])
			} else if value.Valid {
				i.DueDate = value.String
			}
		case invoice.FieldAmount:
			if value, err := invoice.ValueScanner.Amount.FromValue(values[j]); err != nil {
				return err
			} else {
				i.Amount = value
			}
		case invoice.FieldNetAmount:
			if value, err := invoice.ValueScanner.NetAmount.FromValue(values[j]); err != nil {
				return err
			} else {
				i.NetAmount = value
			}
		case invoice.FieldBaseAmount:
			if value, err := invoice.ValueScanner.BaseAmount.FromValue(values[j]); err != nil {
				return err
			} else {
				i.BaseAmount = value
			}
		case invoice.FieldBalance:
			if value, err := invoice.ValueScanner.Balance.FromValue(values[j]); err != nil {
				return err
			} else {
				i.Balance = value
			}
		case invoice.FieldCreditApply:
			if value, err := invoice.ValueScanner.CreditApply.FromValue(values[j]); err != nil {
				return err
			} else {
				i.CreditApply = value
			}
		case invoice.FieldTag:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[j])
			} else if value.Valid {
				i.Tag = invoice.Tag(value.String)
			}
		case invoice.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field id_customer", value)
			} else if value.Valid {
				i.id_customer = new(int)
				*i.id_customer = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (i *Invoice) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the Invoice entity.
func (i *Invoice) QueryCustomer() *CustomerQuery {
	return NewInvoiceClient(i.config).QueryCustomer(i)
}

// QueryImputations queries the "imputations" edge of the Invoice entity.
func (i *Invoice) QueryImputations() *ImputationQuery {
	return NewInvoiceClient(i.config).QueryImputations(i)
}

// QueryTravelItems queries the "travel_items" edge of the Invoice entity.
func (i *Invoice) QueryTravelItems() *TravelItemQuery {
	return NewInvoiceClient(i.config).QueryTravelItems(i)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invoice) Unwrap() *Invoice {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoice is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("creation_date=")
	builder.WriteString(i.CreationDate)
	builder.WriteString(", ")
	builder.WriteString("invoice_number=")
	builder.WriteString(i.InvoiceNumber)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(i.DueDate)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", i.Amount))
	builder.WriteString(", ")
	builder.WriteString("net_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.NetAmount))
	builder.WriteString(", ")
	builder.WriteString("base_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.BaseAmount))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", i.Balance))
	builder.WriteString(", ")
	builder.WriteString("credit_apply=")
	builder.WriteString(fmt.Sprintf("%v", i.CreditApply))
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(fmt.Sprintf("%v", i.Tag))
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice
