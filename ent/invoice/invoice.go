// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the invoice type in the database.
	Label = "invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreationDate holds the string denoting the creation_date field in the database.
	FieldCreationDate = "creation_date"
	// FieldInvoiceNumber holds the string denoting the invoice_number field in the database.
	FieldInvoiceNumber = "invoice_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldNetAmount holds the string denoting the net_amount field in the database.
	FieldNetAmount = "net_amount"
	// FieldBaseAmount holds the string denoting the base_amount field in the database.
	FieldBaseAmount = "base_amount"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldCreditApply holds the string denoting the credit_apply field in the database.
	FieldCreditApply = "credit_apply"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeImputations holds the string denoting the imputations edge name in mutations.
	EdgeImputations = "imputations"
	// EdgeTravelItems holds the string denoting the travel_items edge name in mutations.
	EdgeTravelItems = "travel_items"
	// Table holds the table name of the invoice in the database.
	Table = "invoice"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "invoice"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "id_customer"
	// ImputationsTable is the table that holds the imputations relation/edge.
	ImputationsTable = "invoice_payment_received"
	// ImputationsInverseTable is the table name for the Imputation entity.
	// It exists in this package in order to avoid circular dependency with the "imputation" package.
	ImputationsInverseTable = "invoice_payment_received"
	// ImputationsColumn is the table column denoting the imputations relation/edge.
	ImputationsColumn = "id_invoice"
	// TravelItemsTable is the table that holds the travel_items relation/edge.
	TravelItemsTable = "air_booking"
	// TravelItemsInverseTable is the table name for the TravelItem entity.
	// It exists in this package in order to avoid circular dependency with the "travelitem" package.
	TravelItemsInverseTable = "air_booking"
	// TravelItemsColumn is the table column denoting the travel_items relation/edge.
	TravelItemsColumn = "id_invoice"
)

// Columns holds all SQL columns for invoice fields.
var Columns = []string{
	FieldID,
	FieldCreationDate,
	FieldInvoiceNumber,
	FieldStatus,
	FieldDueDate,
	FieldAmount,
	FieldNetAmount,
	FieldBaseAmount,
	FieldBalance,
	FieldCreditApply,
	FieldTag,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "invoice"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"id_customer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CreationDateValidator is a validator for the "creation_date" field. It is called by the builders before save.
	CreationDateValidator func(string) error
	// InvoiceNumberValidator is a validator for the "invoice_number" field. It is called by the builders before save.
	InvoiceNumberValidator func(string) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount float64
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(float64) error
	// DefaultNetAmount holds the default value on creation for the "net_amount" field.
	DefaultNetAmount float64
	// NetAmountValidator is a validator for the "net_amount" field. It is called by the builders before save.
	NetAmountValidator func(float64) error
	// DefaultBaseAmount holds the default value on creation for the "base_amount" field.
	DefaultBaseAmount float64
	// BaseAmountValidator is a validator for the "base_amount" field. It is called by the builders before save.
	BaseAmountValidator func(float64) error
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// BalanceValidator is a validator for the "balance" field. It is called by the builders before save.
	BalanceValidator func(float64) error
	// DefaultCreditApply holds the default value on creation for the "credit_apply" field.
	DefaultCreditApply float64
	// CreditApplyValidator is a validator for the "credit_apply" field. It is called by the builders before save.
	CreditApplyValidator func(float64) error
	// ValueScanner of all Invoice fields.
	ValueScanner struct {
		Amount      field.TypeValueScanner[float64]
		NetAmount   field.TypeValueScanner[float64]
		BaseAmount  field.TypeValueScanner[float64]
		Balance     field.TypeValueScanner[float64]
		CreditApply field.TypeValueScanner[float64]
	}
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUnpaid is the default value of the Status enum.
const DefaultStatus = StatusUnpaid

// Status values.
const (
	StatusDraft   Status = "draft"
	StatusPaid    Status = "paid"
	StatusOverdue Status = "overdue"
	StatusUnpaid  Status = "unpaid"
	StatusVoid    Status = "void"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusPaid, StatusOverdue, StatusUnpaid, StatusVoid:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for status field: %q", s)
	}
}

// Tag defines the type for the "tag" enum field.
type Tag string

// Tag3 is the default value of the Tag enum.
const DefaultTag = Tag3

// Tag values.
const (
	Tag1 Tag = "1"
	Tag2 Tag = "2"
	Tag3 Tag = "3"
)

func (t Tag) String() string {
	return string(t)
}

// TagValidator is a validator for the "tag" field enum values. It is called by the builders before save.
func TagValidator(t Tag) error {
	switch t {
	case Tag1, Tag2, Tag3:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for tag field: %q", t)
	}
}

// OrderOption defines the ordering options for the Invoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreationDate orders the results by the creation_date field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByInvoiceNumber orders the results by the invoice_number field.
func ByInvoiceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceNumber, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByNetAmount orders the results by the net_amount field.
func ByNetAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetAmount, opts...).ToFunc()
}

// ByBaseAmount orders the results by the base_amount field.
func ByBaseAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseAmount, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByCreditApply orders the results by the credit_apply field.
func ByCreditApply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditApply, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByImputationsCount orders the results by imputations count.
func ByImputationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImputationsStep(), opts...)
	}
}

// ByImputations orders the results by imputations terms.
func ByImputations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImputationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTravelItemsCount orders the results by travel_items count.
func ByTravelItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTravelItemsStep(), opts...)
	}
}

// ByTravelItems orders the results by travel_items terms.
func ByTravelItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTravelItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newImputationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImputationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImputationsTable, ImputationsColumn),
	)
}
func newTravelItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TravelItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TravelItemsTable, TravelItemsColumn),
	)
}
