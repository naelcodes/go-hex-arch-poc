// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naelcodes/ab-backend/ent/customer"
	"github.com/naelcodes/ab-backend/ent/imputation"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/travelitem"
)

// InvoiceCreate is the builder for creating a Invoice entity.
type InvoiceCreate struct {
	config
	mutation *InvoiceMutation
	hooks    []Hook
}

// SetCreationDate sets the "creation_date" field.
func (ic *InvoiceCreate) SetCreationDate(s string) *InvoiceCreate {
	ic.mutation.SetCreationDate(s)
	return ic
}

// SetInvoiceNumber sets the "invoice_number" field.
func (ic *InvoiceCreate) SetInvoiceNumber(s string) *InvoiceCreate {
	ic.mutation.SetInvoiceNumber(s)
	return ic
}

// SetStatus sets the "status" field.
func (ic *InvoiceCreate) SetStatus(i invoice.Status) *InvoiceCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableStatus(i *invoice.Status) *InvoiceCreate {
	if i != nil {
		ic.SetStatus(*i)
	}
	return ic
}

// SetDueDate sets the "due_date" field.
func (ic *InvoiceCreate) SetDueDate(s string) *InvoiceCreate {
	ic.mutation.SetDueDate(s)
	return ic
}

// SetAmount sets the "amount" field.
func (ic *InvoiceCreate) SetAmount(f float64) *InvoiceCreate {
	ic.mutation.SetAmount(f)
	return ic
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableAmount(f *float64) *InvoiceCreate {
	if f != nil {
		ic.SetAmount(*f)
	}
	return ic
}

// SetNetAmount sets the "net_amount" field.
func (ic *InvoiceCreate) SetNetAmount(f float64) *InvoiceCreate {
	ic.mutation.SetNetAmount(f)
	return ic
}

// SetNillableNetAmount sets the "net_amount" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableNetAmount(f *float64) *InvoiceCreate {
	if f != nil {
		ic.SetNetAmount(*f)
	}
	return ic
}

// SetBaseAmount sets the "base_amount" field.
func (ic *InvoiceCreate) SetBaseAmount(f float64) *InvoiceCreate {
	ic.mutation.SetBaseAmount(f)
	return ic
}

// SetNillableBaseAmount sets the "base_amount" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableBaseAmount(f *float64) *InvoiceCreate {
	if f != nil {
		ic.SetBaseAmount(*f)
	}
	return ic
}

// SetBalance sets the "balance" field.
func (ic *InvoiceCreate) SetBalance(f float64) *InvoiceCreate {
	ic.mutation.SetBalance(f)
	return ic
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableBalance(f *float64) *InvoiceCreate {
	if f != nil {
		ic.SetBalance(*f)
	}
	return ic
}

// SetCreditApply sets the "credit_apply" field.
func (ic *InvoiceCreate) SetCreditApply(f float64) *InvoiceCreate {
	ic.mutation.SetCreditApply(f)
	return ic
}

// SetNillableCreditApply sets the "credit_apply" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableCreditApply(f *float64) *InvoiceCreate {
	if f != nil {
		ic.SetCreditApply(*f)
	}
	return ic
}

// SetTag sets the "tag" field.
func (ic *InvoiceCreate) SetTag(i invoice.Tag) *InvoiceCreate {
	ic.mutation.SetTag(i)
	return ic
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableTag(i *invoice.Tag) *InvoiceCreate {
	if i != nil {
		ic.SetTag(*i)
	}
	return ic
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ic *InvoiceCreate) SetCustomerID(id int) *InvoiceCreate {
	ic.mutation.SetCustomerID(id)
	return ic
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ic *InvoiceCreate) SetCustomer(c *Customer) *InvoiceCreate {
	return ic.SetCustomerID(c.ID)
}

// AddImputationIDs adds the "imputations" edge to the Imputation entity by IDs.
func (ic *InvoiceCreate) AddImputationIDs(ids ...int) *InvoiceCreate {
	ic.mutation.AddImputationIDs(ids...)
	return ic
}

// AddImputations adds the "imputations" edges to the Imputation entity.
func (ic *InvoiceCreate) AddImputations(i ...*Imputation) *InvoiceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddImputationIDs(ids...)
}

// AddTravelItemIDs adds the "travel_items" edge to the TravelItem entity by IDs.
func (ic *InvoiceCreate) AddTravelItemIDs(ids ...int) *InvoiceCreate {
	ic.mutation.AddTravelItemIDs(ids...)
	return ic
}

// AddTravelItems adds the "travel_items" edges to the TravelItem entity.
func (ic *InvoiceCreate) AddTravelItems(t ...*TravelItem) *InvoiceCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ic.AddTravelItemIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (ic *InvoiceCreate) Mutation() *InvoiceMutation {
	return ic.mutation
}

// Save creates the Invoice in the database.
func (ic *InvoiceCreate) Save(ctx context.Context) (*Invoice, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvoiceCreate) SaveX(ctx context.Context) *Invoice {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvoiceCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvoiceCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InvoiceCreate) defaults() {
	if _, ok := ic.mutation.Status(); !ok {
		v := invoice.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.Amount(); !ok {
		v := invoice.DefaultAmount
		ic.mutation.SetAmount(v)
	}
	if _, ok := ic.mutation.NetAmount(); !ok {
		v := invoice.DefaultNetAmount
		ic.mutation.SetNetAmount(v)
	}
	if _, ok := ic.mutation.BaseAmount(); !ok {
		v := invoice.DefaultBaseAmount
		ic.mutation.SetBaseAmount(v)
	}
	if _, ok := ic.mutation.Balance(); !ok {
		v := invoice.DefaultBalance
		ic.mutation.SetBalance(v)
	}
	if _, ok := ic.mutation.CreditApply(); !ok {
		v := invoice.DefaultCreditApply
		ic.mutation.SetCreditApply(v)
	}
	if _, ok := ic.mutation.Tag(); !ok {
		v := invoice.DefaultTag
		ic.mutation.SetTag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvoiceCreate) check() error {
	if _, ok := ic.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creation_date", err: errors.New(`ent: missing required field "Invoice.creation_date"`)}
	}
	if v, ok := ic.mutation.CreationDate(); ok {
		if err := invoice.CreationDateValidator(v); err != nil {
			return &ValidationError{Name: "creation_date", err: fmt.Errorf(`ent: validator failed for field "Invoice.creation_date": %w`, err)}
		}
	}
	if _, ok := ic.mutation.InvoiceNumber(); !ok {
		return &ValidationError{Name: "invoice_number", err: errors.New(`ent: missing required field "Invoice.invoice_number"`)}
	}
	if v, ok := ic.mutation.InvoiceNumber(); ok {
		if err := invoice.InvoiceNumberValidator(v); err != nil {
			return &ValidationError{Name: "invoice_number", err: fmt.Errorf(`ent: validator failed for field "Invoice.invoice_number": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Invoice.status"`)}
	}
	if v, ok := ic.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if _, ok := ic.mutation.DueDate(); !ok {
		return &ValidationError{Name: "due_date", err: errors.New(`ent: missing required field "Invoice.due_date"`)}
	}
	if _, ok := ic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Invoice.amount"`)}
	}
	if v, ok := ic.mutation.Amount(); ok {
		if err := invoice.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.amount": %w`, err)}
		}
	}
	if _, ok := ic.mutation.NetAmount(); !ok {
		return &ValidationError{Name: "net_amount", err: errors.New(`ent: missing required field "Invoice.net_amount"`)}
	}
	if v, ok := ic.mutation.NetAmount(); ok {
		if err := invoice.NetAmountValidator(v); err != nil {
			return &ValidationError{Name: "net_amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.net_amount": %w`, err)}
		}
	}
	if _, ok := ic.mutation.BaseAmount(); !ok {
		return &ValidationError{Name: "base_amount", err: errors.New(`ent: missing required field "Invoice.base_amount"`)}
	}
	if v, ok := ic.mutation.BaseAmount(); ok {
		if err := invoice.BaseAmountValidator(v); err != nil {
			return &ValidationError{Name: "base_amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.base_amount": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Invoice.balance"`)}
	}
	if v, ok := ic.mutation.Balance(); ok {
		if err := invoice.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Invoice.balance": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreditApply(); !ok {
		return &ValidationError{Name: "credit_apply", err: errors.New(`ent: missing required field "Invoice.credit_apply"`)}
	}
	if v, ok := ic.mutation.CreditApply(); ok {
		if err := invoice.CreditApplyValidator(v); err != nil {
			return &ValidationError{Name: "credit_apply", err: fmt.Errorf(`ent: validator failed for field "Invoice.credit_apply": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Invoice.tag"`)}
	}
	if v, ok := ic.mutation.Tag(); ok {
		if err := invoice.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Invoice.tag": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Invoice.customer"`)}
	}
	return nil
}

func (ic *InvoiceCreate) sqlSave(ctx context.Context) (*Invoice, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := ic.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InvoiceCreate) createSpec() (*Invoice, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Invoice{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invoice.Table, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.CreationDate(); ok {
		_spec.SetField(invoice.FieldCreationDate, field.TypeString, value)
		_node.CreationDate = value
	}
	if value, ok := ic.mutation.InvoiceNumber(); ok {
		_spec.SetField(invoice.FieldInvoiceNumber, field.TypeString, value)
		_node.InvoiceNumber = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeString, value)
		_node.DueDate = value
	}
	if value, ok := ic.mutation.Amount(); ok {
		vv, err := invoice.ValueScanner.Amount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, vv)
		_node.Amount = value
	}
	if value, ok := ic.mutation.NetAmount(); ok {
		vv, err := invoice.ValueScanner.NetAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(invoice.FieldNetAmount, field.TypeFloat64, vv)
		_node.NetAmount = value
	}
	if value, ok := ic.mutation.BaseAmount(); ok {
		vv, err := invoice.ValueScanner.BaseAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(invoice.FieldBaseAmount, field.TypeFloat64, vv)
		_node.BaseAmount = value
	}
	if value, ok := ic.mutation.Balance(); ok {
		vv, err := invoice.ValueScanner.Balance.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(invoice.FieldBalance, field.TypeFloat64, vv)
		_node.Balance = value
	}
	if value, ok := ic.mutation.CreditApply(); ok {
		vv, err := invoice.ValueScanner.CreditApply.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(invoice.FieldCreditApply, field.TypeFloat64, vv)
		_node.CreditApply = value
	}
	if value, ok := ic.mutation.Tag(); ok {
		_spec.SetField(invoice.FieldTag, field.TypeEnum, value)
		_node.Tag = value
	}
	if nodes := ic.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.id_customer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ImputationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TravelItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// InvoiceCreateBulk is the builder for creating many Invoice entities in bulk.
type InvoiceCreateBulk struct {
	config
	err      error
	builders []*InvoiceCreate
}

// Save creates the Invoice entities in the database.
func (icb *InvoiceCreateBulk) Save(ctx context.Context) ([]*Invoice, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invoice, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvoiceCreateBulk) SaveX(ctx context.Context) []*Invoice {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvoiceCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
