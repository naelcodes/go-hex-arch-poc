// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naelcodes/ab-backend/ent/customer"
	"github.com/naelcodes/ab-backend/ent/imputation"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/predicate"
	"github.com/naelcodes/ab-backend/ent/travelitem"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetCreationDate sets the "creation_date" field.
func (iu *InvoiceUpdate) SetCreationDate(s string) *InvoiceUpdate {
	iu.mutation.SetCreationDate(s)
	return iu
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCreationDate(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCreationDate(*s)
	}
	return iu
}

// SetInvoiceNumber sets the "invoice_number" field.
func (iu *InvoiceUpdate) SetInvoiceNumber(s string) *InvoiceUpdate {
	iu.mutation.SetInvoiceNumber(s)
	return iu
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableInvoiceNumber(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetInvoiceNumber(*s)
	}
	return iu
}

// SetStatus sets the "status" field.
func (iu *InvoiceUpdate) SetStatus(i invoice.Status) *InvoiceUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStatus(i *invoice.Status) *InvoiceUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// SetDueDate sets the "due_date" field.
func (iu *InvoiceUpdate) SetDueDate(s string) *InvoiceUpdate {
	iu.mutation.SetDueDate(s)
	return iu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableDueDate(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetDueDate(*s)
	}
	return iu
}

// SetAmount sets the "amount" field.
func (iu *InvoiceUpdate) SetAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetAmount()
	iu.mutation.SetAmount(f)
	return iu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetAmount(*f)
	}
	return iu
}

// AddAmount adds f to the "amount" field.
func (iu *InvoiceUpdate) AddAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddAmount(f)
	return iu
}

// SetNetAmount sets the "net_amount" field.
func (iu *InvoiceUpdate) SetNetAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetNetAmount()
	iu.mutation.SetNetAmount(f)
	return iu
}

// SetNillableNetAmount sets the "net_amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableNetAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetNetAmount(*f)
	}
	return iu
}

// AddNetAmount adds f to the "net_amount" field.
func (iu *InvoiceUpdate) AddNetAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddNetAmount(f)
	return iu
}

// SetBaseAmount sets the "base_amount" field.
func (iu *InvoiceUpdate) SetBaseAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetBaseAmount()
	iu.mutation.SetBaseAmount(f)
	return iu
}

// SetNillableBaseAmount sets the "base_amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBaseAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetBaseAmount(*f)
	}
	return iu
}

// AddBaseAmount adds f to the "base_amount" field.
func (iu *InvoiceUpdate) AddBaseAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddBaseAmount(f)
	return iu
}

// SetBalance sets the "balance" field.
func (iu *InvoiceUpdate) SetBalance(f float64) *InvoiceUpdate {
	iu.mutation.ResetBalance()
	iu.mutation.SetBalance(f)
	return iu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBalance(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetBalance(*f)
	}
	return iu
}

// AddBalance adds f to the "balance" field.
func (iu *InvoiceUpdate) AddBalance(f float64) *InvoiceUpdate {
	iu.mutation.AddBalance(f)
	return iu
}

// SetCreditApply sets the "credit_apply" field.
func (iu *InvoiceUpdate) SetCreditApply(f float64) *InvoiceUpdate {
	iu.mutation.ResetCreditApply()
	iu.mutation.SetCreditApply(f)
	return iu
}

// SetNillableCreditApply sets the "credit_apply" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCreditApply(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetCreditApply(*f)
	}
	return iu
}

// AddCreditApply adds f to the "credit_apply" field.
func (iu *InvoiceUpdate) AddCreditApply(f float64) *InvoiceUpdate {
	iu.mutation.AddCreditApply(f)
	return iu
}

// SetTag sets the "tag" field.
func (iu *InvoiceUpdate) SetTag(i invoice.Tag) *InvoiceUpdate {
	iu.mutation.SetTag(i)
	return iu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTag(i *invoice.Tag) *InvoiceUpdate {
	if i != nil {
		iu.SetTag(*i)
	}
	return iu
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iu *InvoiceUpdate) SetCustomerID(id int) *InvoiceUpdate {
	iu.mutation.SetCustomerID(id)
	return iu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iu *InvoiceUpdate) SetCustomer(c *Customer) *InvoiceUpdate {
	return iu.SetCustomerID(c.ID)
}

// AddImputationIDs adds the "imputations" edge to the Imputation entity by IDs.
func (iu *InvoiceUpdate) AddImputationIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.AddImputationIDs(ids...)
	return iu
}

// AddImputations adds the "imputations" edges to the Imputation entity.
func (iu *InvoiceUpdate) AddImputations(i ...*Imputation) *InvoiceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddImputationIDs(ids...)
}

// AddTravelItemIDs adds the "travel_items" edge to the TravelItem entity by IDs.
func (iu *InvoiceUpdate) AddTravelItemIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.AddTravelItemIDs(ids...)
	return iu
}

// AddTravelItems adds the "travel_items" edges to the TravelItem entity.
func (iu *InvoiceUpdate) AddTravelItems(t ...*TravelItem) *InvoiceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.AddTravelItemIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iu *InvoiceUpdate) ClearCustomer() *InvoiceUpdate {
	iu.mutation.ClearCustomer()
	return iu
}

// ClearImputations clears all "imputations" edges to the Imputation entity.
func (iu *InvoiceUpdate) ClearImputations() *InvoiceUpdate {
	iu.mutation.ClearImputations()
	return iu
}

// RemoveImputationIDs removes the "imputations" edge to Imputation entities by IDs.
func (iu *InvoiceUpdate) RemoveImputationIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.RemoveImputationIDs(ids...)
	return iu
}

// RemoveImputations removes "imputations" edges to Imputation entities.
func (iu *InvoiceUpdate) RemoveImputations(i ...*Imputation) *InvoiceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveImputationIDs(ids...)
}

// ClearTravelItems clears all "travel_items" edges to the TravelItem entity.
func (iu *InvoiceUpdate) ClearTravelItems() *InvoiceUpdate {
	iu.mutation.ClearTravelItems()
	return iu
}

// RemoveTravelItemIDs removes the "travel_items" edge to TravelItem entities by IDs.
func (iu *InvoiceUpdate) RemoveTravelItemIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.RemoveTravelItemIDs(ids...)
	return iu
}

// RemoveTravelItems removes "travel_items" edges to TravelItem entities.
func (iu *InvoiceUpdate) RemoveTravelItems(t ...*TravelItem) *InvoiceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.RemoveTravelItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if v, ok := iu.mutation.CreationDate(); ok {
		if err := invoice.CreationDateValidator(v); err != nil {
			return &ValidationError{Name: "creation_date", err: fmt.Errorf(`ent: validator failed for field "Invoice.creation_date": %w`, err)}
		}
	}
	if v, ok := iu.mutation.InvoiceNumber(); ok {
		if err := invoice.InvoiceNumberValidator(v); err != nil {
			return &ValidationError{Name: "invoice_number", err: fmt.Errorf(`ent: validator failed for field "Invoice.invoice_number": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Amount(); ok {
		if err := invoice.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.amount": %w`, err)}
		}
	}
	if v, ok := iu.mutation.NetAmount(); ok {
		if err := invoice.NetAmountValidator(v); err != nil {
			return &ValidationError{Name: "net_amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.net_amount": %w`, err)}
		}
	}
	if v, ok := iu.mutation.BaseAmount(); ok {
		if err := invoice.BaseAmountValidator(v); err != nil {
			return &ValidationError{Name: "base_amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.base_amount": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Balance(); ok {
		if err := invoice.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Invoice.balance": %w`, err)}
		}
	}
	if v, ok := iu.mutation.CreditApply(); ok {
		if err := invoice.CreditApplyValidator(v); err != nil {
			return &ValidationError{Name: "credit_apply", err: fmt.Errorf(`ent: validator failed for field "Invoice.credit_apply": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Tag(); ok {
		if err := invoice.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Invoice.tag": %w`, err)}
		}
	}
	if _, ok := iu.mutation.CustomerID(); iu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoice.customer"`)
	}
	return nil
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.CreationDate(); ok {
		_spec.SetField(invoice.FieldCreationDate, field.TypeString, value)
	}
	if value, ok := iu.mutation.InvoiceNumber(); ok {
		_spec.SetField(invoice.FieldInvoiceNumber, field.TypeString, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeString, value)
	}
	if value, ok := iu.mutation.Amount(); ok {
		vv, err := invoice.ValueScanner.Amount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.AddedAmount(); ok {
		vv, err := invoice.ValueScanner.Amount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(invoice.FieldAmount, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.NetAmount(); ok {
		vv, err := invoice.ValueScanner.NetAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(invoice.FieldNetAmount, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.AddedNetAmount(); ok {
		vv, err := invoice.ValueScanner.NetAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(invoice.FieldNetAmount, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.BaseAmount(); ok {
		vv, err := invoice.ValueScanner.BaseAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(invoice.FieldBaseAmount, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.AddedBaseAmount(); ok {
		vv, err := invoice.ValueScanner.BaseAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(invoice.FieldBaseAmount, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.Balance(); ok {
		vv, err := invoice.ValueScanner.Balance.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(invoice.FieldBalance, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.AddedBalance(); ok {
		vv, err := invoice.ValueScanner.Balance.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(invoice.FieldBalance, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.CreditApply(); ok {
		vv, err := invoice.ValueScanner.CreditApply.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(invoice.FieldCreditApply, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.AddedCreditApply(); ok {
		vv, err := invoice.ValueScanner.CreditApply.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(invoice.FieldCreditApply, field.TypeFloat64, vv)
	}
	if value, ok := iu.mutation.Tag(); ok {
		_spec.SetField(invoice.FieldTag, field.TypeEnum, value)
	}
	if iu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ImputationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedImputationsIDs(); len(nodes) > 0 && !iu.mutation.ImputationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ImputationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TravelItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTravelItemsIDs(); len(nodes) > 0 && !iu.mutation.TravelItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TravelItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetCreationDate sets the "creation_date" field.
func (iuo *InvoiceUpdateOne) SetCreationDate(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCreationDate(s)
	return iuo
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCreationDate(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCreationDate(*s)
	}
	return iuo
}

// SetInvoiceNumber sets the "invoice_number" field.
func (iuo *InvoiceUpdateOne) SetInvoiceNumber(s string) *InvoiceUpdateOne {
	iuo.mutation.SetInvoiceNumber(s)
	return iuo
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableInvoiceNumber(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetInvoiceNumber(*s)
	}
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InvoiceUpdateOne) SetStatus(i invoice.Status) *InvoiceUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStatus(i *invoice.Status) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// SetDueDate sets the "due_date" field.
func (iuo *InvoiceUpdateOne) SetDueDate(s string) *InvoiceUpdateOne {
	iuo.mutation.SetDueDate(s)
	return iuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableDueDate(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetDueDate(*s)
	}
	return iuo
}

// SetAmount sets the "amount" field.
func (iuo *InvoiceUpdateOne) SetAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetAmount()
	iuo.mutation.SetAmount(f)
	return iuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetAmount(*f)
	}
	return iuo
}

// AddAmount adds f to the "amount" field.
func (iuo *InvoiceUpdateOne) AddAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddAmount(f)
	return iuo
}

// SetNetAmount sets the "net_amount" field.
func (iuo *InvoiceUpdateOne) SetNetAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetNetAmount()
	iuo.mutation.SetNetAmount(f)
	return iuo
}

// SetNillableNetAmount sets the "net_amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableNetAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetNetAmount(*f)
	}
	return iuo
}

// AddNetAmount adds f to the "net_amount" field.
func (iuo *InvoiceUpdateOne) AddNetAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddNetAmount(f)
	return iuo
}

// SetBaseAmount sets the "base_amount" field.
func (iuo *InvoiceUpdateOne) SetBaseAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetBaseAmount()
	iuo.mutation.SetBaseAmount(f)
	return iuo
}

// SetNillableBaseAmount sets the "base_amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBaseAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetBaseAmount(*f)
	}
	return iuo
}

// AddBaseAmount adds f to the "base_amount" field.
func (iuo *InvoiceUpdateOne) AddBaseAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddBaseAmount(f)
	return iuo
}

// SetBalance sets the "balance" field.
func (iuo *InvoiceUpdateOne) SetBalance(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetBalance()
	iuo.mutation.SetBalance(f)
	return iuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBalance(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetBalance(*f)
	}
	return iuo
}

// AddBalance adds f to the "balance" field.
func (iuo *InvoiceUpdateOne) AddBalance(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddBalance(f)
	return iuo
}

// SetCreditApply sets the "credit_apply" field.
func (iuo *InvoiceUpdateOne) SetCreditApply(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetCreditApply()
	iuo.mutation.SetCreditApply(f)
	return iuo
}

// SetNillableCreditApply sets the "credit_apply" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCreditApply(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetCreditApply(*f)
	}
	return iuo
}

// AddCreditApply adds f to the "credit_apply" field.
func (iuo *InvoiceUpdateOne) AddCreditApply(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddCreditApply(f)
	return iuo
}

// SetTag sets the "tag" field.
func (iuo *InvoiceUpdateOne) SetTag(i invoice.Tag) *InvoiceUpdateOne {
	iuo.mutation.SetTag(i)
	return iuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTag(i *invoice.Tag) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetTag(*i)
	}
	return iuo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iuo *InvoiceUpdateOne) SetCustomerID(id int) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerID(id)
	return iuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) SetCustomer(c *Customer) *InvoiceUpdateOne {
	return iuo.SetCustomerID(c.ID)
}

// AddImputationIDs adds the "imputations" edge to the Imputation entity by IDs.
func (iuo *InvoiceUpdateOne) AddImputationIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.AddImputationIDs(ids...)
	return iuo
}

// AddImputations adds the "imputations" edges to the Imputation entity.
func (iuo *InvoiceUpdateOne) AddImputations(i ...*Imputation) *InvoiceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddImputationIDs(ids...)
}

// AddTravelItemIDs adds the "travel_items" edge to the TravelItem entity by IDs.
func (iuo *InvoiceUpdateOne) AddTravelItemIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.AddTravelItemIDs(ids...)
	return iuo
}

// AddTravelItems adds the "travel_items" edges to the TravelItem entity.
func (iuo *InvoiceUpdateOne) AddTravelItems(t ...*TravelItem) *InvoiceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.AddTravelItemIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) ClearCustomer() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomer()
	return iuo
}

// ClearImputations clears all "imputations" edges to the Imputation entity.
func (iuo *InvoiceUpdateOne) ClearImputations() *InvoiceUpdateOne {
	iuo.mutation.ClearImputations()
	return iuo
}

// RemoveImputationIDs removes the "imputations" edge to Imputation entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveImputationIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.RemoveImputationIDs(ids...)
	return iuo
}

// RemoveImputations removes "imputations" edges to Imputation entities.
func (iuo *InvoiceUpdateOne) RemoveImputations(i ...*Imputation) *InvoiceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveImputationIDs(ids...)
}

// ClearTravelItems clears all "travel_items" edges to the TravelItem entity.
func (iuo *InvoiceUpdateOne) ClearTravelItems() *InvoiceUpdateOne {
	iuo.mutation.ClearTravelItems()
	return iuo
}

// RemoveTravelItemIDs removes the "travel_items" edge to TravelItem entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveTravelItemIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.RemoveTravelItemIDs(ids...)
	return iuo
}

// RemoveTravelItems removes "travel_items" edges to TravelItem entities.
func (iuo *InvoiceUpdateOne) RemoveTravelItems(t ...*TravelItem) *InvoiceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.RemoveTravelItemIDs(ids...)
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if v, ok := iuo.mutation.CreationDate(); ok {
		if err := invoice.CreationDateValidator(v); err != nil {
			return &ValidationError{Name: "creation_date", err: fmt.Errorf(`ent: validator failed for field "Invoice.creation_date": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.InvoiceNumber(); ok {
		if err := invoice.InvoiceNumberValidator(v); err != nil {
			return &ValidationError{Name: "invoice_number", err: fmt.Errorf(`ent: validator failed for field "Invoice.invoice_number": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Amount(); ok {
		if err := invoice.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.amount": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.NetAmount(); ok {
		if err := invoice.NetAmountValidator(v); err != nil {
			return &ValidationError{Name: "net_amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.net_amount": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.BaseAmount(); ok {
		if err := invoice.BaseAmountValidator(v); err != nil {
			return &ValidationError{Name: "base_amount", err: fmt.Errorf(`ent: validator failed for field "Invoice.base_amount": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Balance(); ok {
		if err := invoice.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Invoice.balance": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.CreditApply(); ok {
		if err := invoice.CreditApplyValidator(v); err != nil {
			return &ValidationError{Name: "credit_apply", err: fmt.Errorf(`ent: validator failed for field "Invoice.credit_apply": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Tag(); ok {
		if err := invoice.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Invoice.tag": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.CustomerID(); iuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invoice.customer"`)
	}
	return nil
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.CreationDate(); ok {
		_spec.SetField(invoice.FieldCreationDate, field.TypeString, value)
	}
	if value, ok := iuo.mutation.InvoiceNumber(); ok {
		_spec.SetField(invoice.FieldInvoiceNumber, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Amount(); ok {
		vv, err := invoice.ValueScanner.Amount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.AddedAmount(); ok {
		vv, err := invoice.ValueScanner.Amount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(invoice.FieldAmount, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.NetAmount(); ok {
		vv, err := invoice.ValueScanner.NetAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(invoice.FieldNetAmount, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.AddedNetAmount(); ok {
		vv, err := invoice.ValueScanner.NetAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(invoice.FieldNetAmount, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.BaseAmount(); ok {
		vv, err := invoice.ValueScanner.BaseAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(invoice.FieldBaseAmount, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.AddedBaseAmount(); ok {
		vv, err := invoice.ValueScanner.BaseAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(invoice.FieldBaseAmount, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.Balance(); ok {
		vv, err := invoice.ValueScanner.Balance.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(invoice.FieldBalance, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.AddedBalance(); ok {
		vv, err := invoice.ValueScanner.Balance.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(invoice.FieldBalance, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.CreditApply(); ok {
		vv, err := invoice.ValueScanner.CreditApply.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(invoice.FieldCreditApply, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.AddedCreditApply(); ok {
		vv, err := invoice.ValueScanner.CreditApply.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(invoice.FieldCreditApply, field.TypeFloat64, vv)
	}
	if value, ok := iuo.mutation.Tag(); ok {
		_spec.SetField(invoice.FieldTag, field.TypeEnum, value)
	}
	if iuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ImputationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedImputationsIDs(); len(nodes) > 0 && !iuo.mutation.ImputationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ImputationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ImputationsTable,
			Columns: []string{invoice.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TravelItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTravelItemsIDs(); len(nodes) > 0 && !iuo.mutation.TravelItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TravelItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.TravelItemsTable,
			Columns: []string{invoice.TravelItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
