// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/naelcodes/ab-backend/ent/customer"
	"github.com/naelcodes/ab-backend/ent/payment"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// BaseAmount holds the value of the "base_amount" field.
	BaseAmount float64 `json:"base_amount,omitempty"`
	// UsedAmount holds the value of the "used_amount" field.
	UsedAmount float64 `json:"used_amount,omitempty"`
	// Type holds the value of the "type" field.
	Type payment.Type `json:"type,omitempty"`
	// Fop holds the value of the "fop" field.
	Fop payment.Fop `json:"fop,omitempty"`
	// Status holds the value of the "status" field.
	Status payment.Status `json:"status,omitempty"`
	// IDChartOfAccounts holds the value of the "id_chart_of_accounts" field.
	IDChartOfAccounts int `json:"id_chart_of_accounts,omitempty"`
	// IDCurrency holds the value of the "id_currency" field.
	IDCurrency int `json:"id_currency,omitempty"`
	// Tag holds the value of the "Tag" field.
	Tag payment.Tag `json:"Tag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentQuery when eager-loading is set.
	Edges        PaymentEdges `json:"edges"`
	id_customer  *int
	selectValues sql.SelectValues
}

// PaymentEdges holds the relations/edges for other nodes in the graph.
type PaymentEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Imputations holds the value of the imputations edge.
	Imputations []*Imputation `json:"imputations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ImputationsOrErr returns the Imputations value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentEdges) ImputationsOrErr() ([]*Imputation, error) {
	if e.loadedTypes[1] {
		return e.Imputations, nil
	}
	return nil, &NotLoadedError{edge: "imputations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payment.FieldID, payment.FieldIDChartOfAccounts, payment.FieldIDCurrency:
			values[i] = new(sql.NullInt64)
		case payment.FieldNumber, payment.FieldDate, payment.FieldType, payment.FieldFop, payment.FieldStatus, payment.FieldTag:
			values[i] = new(sql.NullString)
		case payment.FieldBalance:
			values[i] = payment.ValueScanner.Balance.ScanValue()
		case payment.FieldAmount:
			values[i] = payment.ValueScanner.Amount.ScanValue()
		case payment.FieldBaseAmount:
			values[i] = payment.ValueScanner.BaseAmount.ScanValue()
		case payment.FieldUsedAmount:
			values[i] = payment.ValueScanner.UsedAmount.ScanValue()
		case payment.ForeignKeys[0]: // id_customer
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case payment.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				pa.Number = value.String
			}
		case payment.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				pa.Date = value.String
			}
		case payment.FieldBalance:
			if value, err := payment.ValueScanner.Balance.FromValue(values[i]); err != nil {
				return err
			} else {
				pa.Balance = value
			}
		case payment.FieldAmount:
			if value, err := payment.ValueScanner.Amount.FromValue(values[i]); err != nil {
				return err
			} else {
				pa.Amount = value
			}
		case payment.FieldBaseAmount:
			if value, err := payment.ValueScanner.BaseAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				pa.BaseAmount = value
			}
		case payment.FieldUsedAmount:
			if value, err := payment.ValueScanner.UsedAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				pa.UsedAmount = value
			}
		case payment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = payment.Type(value.String)
			}
		case payment.FieldFop:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fop", values[i])
			} else if value.Valid {
				pa.Fop = payment.Fop(value.String)
			}
		case payment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = payment.Status(value.String)
			}
		case payment.FieldIDChartOfAccounts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id_chart_of_accounts", values[i])
			} else if value.Valid {
				pa.IDChartOfAccounts = int(value.Int64)
			}
		case payment.FieldIDCurrency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id_currency", values[i])
			} else if value.Valid {
				pa.IDCurrency = int(value.Int64)
			}
		case payment.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Tag", values[i])
			} else if value.Valid {
				pa.Tag = payment.Tag(value.String)
			}
		case payment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field id_customer", value)
			} else if value.Valid {
				pa.id_customer = new(int)
				*pa.id_customer = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Payment.
// This includes values selected through modifiers, order, etc.
func (pa *Payment) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the Payment entity.
func (pa *Payment) QueryCustomer() *CustomerQuery {
	return NewPaymentClient(pa.config).QueryCustomer(pa)
}

// QueryImputations queries the "imputations" edge of the Payment entity.
func (pa *Payment) QueryImputations() *ImputationQuery {
	return NewPaymentClient(pa.config).QueryImputations(pa)
}

// Update returns a builder for updating this Payment.
// Note that you need to call Payment.Unwrap() before calling this method if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return NewPaymentClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Payment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("number=")
	builder.WriteString(pa.Number)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(pa.Date)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", pa.Balance))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", ")
	builder.WriteString("base_amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.BaseAmount))
	builder.WriteString(", ")
	builder.WriteString("used_amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.UsedAmount))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pa.Type))
	builder.WriteString(", ")
	builder.WriteString("fop=")
	builder.WriteString(fmt.Sprintf("%v", pa.Fop))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("id_chart_of_accounts=")
	builder.WriteString(fmt.Sprintf("%v", pa.IDChartOfAccounts))
	builder.WriteString(", ")
	builder.WriteString("id_currency=")
	builder.WriteString(fmt.Sprintf("%v", pa.IDCurrency))
	builder.WriteString(", ")
	builder.WriteString("Tag=")
	builder.WriteString(fmt.Sprintf("%v", pa.Tag))
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment
