// Code generated by ent, DO NOT EDIT.

package payment

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the payment type in the database.
	Label = "payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldBaseAmount holds the string denoting the base_amount field in the database.
	FieldBaseAmount = "base_amount"
	// FieldUsedAmount holds the string denoting the used_amount field in the database.
	FieldUsedAmount = "used_amount"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFop holds the string denoting the fop field in the database.
	FieldFop = "fop"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIDChartOfAccounts holds the string denoting the id_chart_of_accounts field in the database.
	FieldIDChartOfAccounts = "id_chart_of_accounts"
	// FieldIDCurrency holds the string denoting the id_currency field in the database.
	FieldIDCurrency = "id_currency"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeImputations holds the string denoting the imputations edge name in mutations.
	EdgeImputations = "imputations"
	// Table holds the table name of the payment in the database.
	Table = "payment_received"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "payment_received"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customer"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "id_customer"
	// ImputationsTable is the table that holds the imputations relation/edge.
	ImputationsTable = "invoice_payment_received"
	// ImputationsInverseTable is the table name for the Imputation entity.
	// It exists in this package in order to avoid circular dependency with the "imputation" package.
	ImputationsInverseTable = "invoice_payment_received"
	// ImputationsColumn is the table column denoting the imputations relation/edge.
	ImputationsColumn = "id_payment_received"
)

// Columns holds all SQL columns for payment fields.
var Columns = []string{
	FieldID,
	FieldNumber,
	FieldDate,
	FieldBalance,
	FieldAmount,
	FieldBaseAmount,
	FieldUsedAmount,
	FieldType,
	FieldFop,
	FieldStatus,
	FieldIDChartOfAccounts,
	FieldIDCurrency,
	FieldTag,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payment_received"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"id_customer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(string) error
	// DateValidator is a validator for the "date" field. It is called by the builders before save.
	DateValidator func(string) error
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// BalanceValidator is a validator for the "balance" field. It is called by the builders before save.
	BalanceValidator func(float64) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount float64
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(float64) error
	// DefaultBaseAmount holds the default value on creation for the "base_amount" field.
	DefaultBaseAmount float64
	// BaseAmountValidator is a validator for the "base_amount" field. It is called by the builders before save.
	BaseAmountValidator func(float64) error
	// DefaultUsedAmount holds the default value on creation for the "used_amount" field.
	DefaultUsedAmount float64
	// UsedAmountValidator is a validator for the "used_amount" field. It is called by the builders before save.
	UsedAmountValidator func(float64) error
	// DefaultIDChartOfAccounts holds the default value on creation for the "id_chart_of_accounts" field.
	DefaultIDChartOfAccounts int
	// DefaultIDCurrency holds the default value on creation for the "id_currency" field.
	DefaultIDCurrency int
	// ValueScanner of all Payment fields.
	ValueScanner struct {
		Balance    field.TypeValueScanner[float64]
		Amount     field.TypeValueScanner[float64]
		BaseAmount field.TypeValueScanner[float64]
		UsedAmount field.TypeValueScanner[float64]
	}
)

// Type defines the type for the "type" enum field.
type Type string

// TypeCustomerPayment is the default value of the Type enum.
const DefaultType = TypeCustomerPayment

// Type values.
const (
	TypeSupplierRefund      Type = "supplier_refund"
	TypeTransferFromAccount Type = "transfer_from_account"
	TypeOtherIncome         Type = "other_income"
	TypeCustomerPayment     Type = "customer_payment"
	TypeSalesReceipt        Type = "sales_receipt"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSupplierRefund, TypeTransferFromAccount, TypeOtherIncome, TypeCustomerPayment, TypeSalesReceipt:
		return nil
	default:
		return fmt.Errorf("payment: invalid enum value for type field: %q", _type)
	}
}

// Fop defines the type for the "fop" enum field.
type Fop string

// FopCash is the default value of the Fop enum.
const DefaultFop = FopCash

// Fop values.
const (
	FopCash         Fop = "cash"
	FopCheck        Fop = "check"
	FopBankTransfer Fop = "bank_transfer"
)

func (f Fop) String() string {
	return string(f)
}

// FopValidator is a validator for the "fop" field enum values. It is called by the builders before save.
func FopValidator(f Fop) error {
	switch f {
	case FopCash, FopCheck, FopBankTransfer:
		return nil
	default:
		return fmt.Errorf("payment: invalid enum value for fop field: %q", f)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusOpen is the default value of the Status enum.
const DefaultStatus = StatusOpen

// Status values.
const (
	StatusOpen Status = "open"
	StatusUsed Status = "used"
	StatusVoid Status = "void"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOpen, StatusUsed, StatusVoid:
		return nil
	default:
		return fmt.Errorf("payment: invalid enum value for status field: %q", s)
	}
}

// Tag defines the type for the "Tag" enum field.
type Tag string

// Tag3 is the default value of the Tag enum.
const DefaultTag = Tag3

// Tag values.
const (
	Tag1 Tag = "1"
	Tag2 Tag = "2"
	Tag3 Tag = "3"
)

func (_tag Tag) String() string {
	return string(_tag)
}

// TagValidator is a validator for the "Tag" field enum values. It is called by the builders before save.
func TagValidator(_tag Tag) error {
	switch _tag {
	case Tag1, Tag2, Tag3:
		return nil
	default:
		return fmt.Errorf("payment: invalid enum value for Tag field: %q", _tag)
	}
}

// OrderOption defines the ordering options for the Payment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByBaseAmount orders the results by the base_amount field.
func ByBaseAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseAmount, opts...).ToFunc()
}

// ByUsedAmount orders the results by the used_amount field.
func ByUsedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedAmount, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFop orders the results by the fop field.
func ByFop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFop, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIDChartOfAccounts orders the results by the id_chart_of_accounts field.
func ByIDChartOfAccounts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDChartOfAccounts, opts...).ToFunc()
}

// ByIDCurrency orders the results by the id_currency field.
func ByIDCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCurrency, opts...).ToFunc()
}

// ByTag orders the results by the Tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByImputationsCount orders the results by imputations count.
func ByImputationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImputationsStep(), opts...)
	}
}

// ByImputations orders the results by imputations terms.
func ByImputations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImputationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newImputationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImputationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImputationsTable, ImputationsColumn),
	)
}
