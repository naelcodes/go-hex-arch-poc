// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/travelitem"
)

// TravelItem is the model entity for the TravelItem schema.
type TravelItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TotalPrice holds the value of the "total_price" field.
	TotalPrice float64 `json:"total_price,omitempty"`
	// Itinerary holds the value of the "itinerary" field.
	Itinerary string `json:"itinerary,omitempty"`
	// TravelerName holds the value of the "traveler_name" field.
	TravelerName string `json:"traveler_name,omitempty"`
	// TicketNumber holds the value of the "ticket_number" field.
	TicketNumber string `json:"ticket_number,omitempty"`
	// ConjunctionNumber holds the value of the "conjunction_number" field.
	ConjunctionNumber int `json:"conjunction_number,omitempty"`
	// TransactionType holds the value of the "transaction_type" field.
	TransactionType string `json:"transaction_type,omitempty"`
	// ProductType holds the value of the "product_type" field.
	ProductType string `json:"product_type,omitempty"`
	// Status holds the value of the "status" field.
	Status travelitem.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TravelItemQuery when eager-loading is set.
	Edges        TravelItemEdges `json:"edges"`
	id_invoice   *int
	selectValues sql.SelectValues
}

// TravelItemEdges holds the relations/edges for other nodes in the graph.
type TravelItemEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TravelItemEdges) InvoiceOrErr() (*Invoice, error) {
	if e.loadedTypes[0] {
		if e.Invoice == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invoice.Label}
		}
		return e.Invoice, nil
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TravelItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case travelitem.FieldID, travelitem.FieldConjunctionNumber:
			values[i] = new(sql.NullInt64)
		case travelitem.FieldItinerary, travelitem.FieldTravelerName, travelitem.FieldTicketNumber, travelitem.FieldTransactionType, travelitem.FieldProductType, travelitem.FieldStatus:
			values[i] = new(sql.NullString)
		case travelitem.FieldTotalPrice:
			values[i] = travelitem.ValueScanner.TotalPrice.ScanValue()
		case travelitem.ForeignKeys[0]: // id_invoice
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TravelItem fields.
func (ti *TravelItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case travelitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case travelitem.FieldTotalPrice:
			if value, err := travelitem.ValueScanner.TotalPrice.FromValue(values[i]); err != nil {
				return err
			} else {
				ti.TotalPrice = value
			}
		case travelitem.FieldItinerary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field itinerary", values[i])
			} else if value.Valid {
				ti.Itinerary = value.String
			}
		case travelitem.FieldTravelerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field traveler_name", values[i])
			} else if value.Valid {
				ti.TravelerName = value.String
			}
		case travelitem.FieldTicketNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_number", values[i])
			} else if value.Valid {
				ti.TicketNumber = value.String
			}
		case travelitem.FieldConjunctionNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field conjunction_number", values[i])
			} else if value.Valid {
				ti.ConjunctionNumber = int(value.Int64)
			}
		case travelitem.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_type", values[i])
			} else if value.Valid {
				ti.TransactionType = value.String
			}
		case travelitem.FieldProductType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_type", values[i])
			} else if value.Valid {
				ti.ProductType = value.String
			}
		case travelitem.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ti.Status = travelitem.Status(value.String)
			}
		case travelitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field id_invoice", value)
			} else if value.Valid {
				ti.id_invoice = new(int)
				*ti.id_invoice = int(value.Int64)
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TravelItem.
// This includes values selected through modifiers, order, etc.
func (ti *TravelItem) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the TravelItem entity.
func (ti *TravelItem) QueryInvoice() *InvoiceQuery {
	return NewTravelItemClient(ti.config).QueryInvoice(ti)
}

// Update returns a builder for updating this TravelItem.
// Note that you need to call TravelItem.Unwrap() before calling this method if this TravelItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TravelItem) Update() *TravelItemUpdateOne {
	return NewTravelItemClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TravelItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TravelItem) Unwrap() *TravelItem {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TravelItem is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TravelItem) String() string {
	var builder strings.Builder
	builder.WriteString("TravelItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("total_price=")
	builder.WriteString(fmt.Sprintf("%v", ti.TotalPrice))
	builder.WriteString(", ")
	builder.WriteString("itinerary=")
	builder.WriteString(ti.Itinerary)
	builder.WriteString(", ")
	builder.WriteString("traveler_name=")
	builder.WriteString(ti.TravelerName)
	builder.WriteString(", ")
	builder.WriteString("ticket_number=")
	builder.WriteString(ti.TicketNumber)
	builder.WriteString(", ")
	builder.WriteString("conjunction_number=")
	builder.WriteString(fmt.Sprintf("%v", ti.ConjunctionNumber))
	builder.WriteString(", ")
	builder.WriteString("transaction_type=")
	builder.WriteString(ti.TransactionType)
	builder.WriteString(", ")
	builder.WriteString("product_type=")
	builder.WriteString(ti.ProductType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ti.Status))
	builder.WriteByte(')')
	return builder.String()
}

// TravelItems is a parsable slice of TravelItem.
type TravelItems []*TravelItem
