// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naelcodes/ab-backend/ent/invoice"
	"github.com/naelcodes/ab-backend/ent/travelitem"
)

// TravelItemCreate is the builder for creating a TravelItem entity.
type TravelItemCreate struct {
	config
	mutation *TravelItemMutation
	hooks    []Hook
}

// SetTotalPrice sets the "total_price" field.
func (tic *TravelItemCreate) SetTotalPrice(f float64) *TravelItemCreate {
	tic.mutation.SetTotalPrice(f)
	return tic
}

// SetItinerary sets the "itinerary" field.
func (tic *TravelItemCreate) SetItinerary(s string) *TravelItemCreate {
	tic.mutation.SetItinerary(s)
	return tic
}

// SetTravelerName sets the "traveler_name" field.
func (tic *TravelItemCreate) SetTravelerName(s string) *TravelItemCreate {
	tic.mutation.SetTravelerName(s)
	return tic
}

// SetTicketNumber sets the "ticket_number" field.
func (tic *TravelItemCreate) SetTicketNumber(s string) *TravelItemCreate {
	tic.mutation.SetTicketNumber(s)
	return tic
}

// SetConjunctionNumber sets the "conjunction_number" field.
func (tic *TravelItemCreate) SetConjunctionNumber(i int) *TravelItemCreate {
	tic.mutation.SetConjunctionNumber(i)
	return tic
}

// SetTransactionType sets the "transaction_type" field.
func (tic *TravelItemCreate) SetTransactionType(s string) *TravelItemCreate {
	tic.mutation.SetTransactionType(s)
	return tic
}

// SetProductType sets the "product_type" field.
func (tic *TravelItemCreate) SetProductType(s string) *TravelItemCreate {
	tic.mutation.SetProductType(s)
	return tic
}

// SetStatus sets the "status" field.
func (tic *TravelItemCreate) SetStatus(t travelitem.Status) *TravelItemCreate {
	tic.mutation.SetStatus(t)
	return tic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tic *TravelItemCreate) SetNillableStatus(t *travelitem.Status) *TravelItemCreate {
	if t != nil {
		tic.SetStatus(*t)
	}
	return tic
}

// SetInvoiceID sets the "invoice" edge to the Invoice entity by ID.
func (tic *TravelItemCreate) SetInvoiceID(id int) *TravelItemCreate {
	tic.mutation.SetInvoiceID(id)
	return tic
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (tic *TravelItemCreate) SetInvoice(i *Invoice) *TravelItemCreate {
	return tic.SetInvoiceID(i.ID)
}

// Mutation returns the TravelItemMutation object of the builder.
func (tic *TravelItemCreate) Mutation() *TravelItemMutation {
	return tic.mutation
}

// Save creates the TravelItem in the database.
func (tic *TravelItemCreate) Save(ctx context.Context) (*TravelItem, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TravelItemCreate) SaveX(ctx context.Context) *TravelItem {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TravelItemCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TravelItemCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TravelItemCreate) defaults() {
	if _, ok := tic.mutation.Status(); !ok {
		v := travelitem.DefaultStatus
		tic.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TravelItemCreate) check() error {
	if _, ok := tic.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`ent: missing required field "TravelItem.total_price"`)}
	}
	if _, ok := tic.mutation.Itinerary(); !ok {
		return &ValidationError{Name: "itinerary", err: errors.New(`ent: missing required field "TravelItem.itinerary"`)}
	}
	if _, ok := tic.mutation.TravelerName(); !ok {
		return &ValidationError{Name: "traveler_name", err: errors.New(`ent: missing required field "TravelItem.traveler_name"`)}
	}
	if _, ok := tic.mutation.TicketNumber(); !ok {
		return &ValidationError{Name: "ticket_number", err: errors.New(`ent: missing required field "TravelItem.ticket_number"`)}
	}
	if _, ok := tic.mutation.ConjunctionNumber(); !ok {
		return &ValidationError{Name: "conjunction_number", err: errors.New(`ent: missing required field "TravelItem.conjunction_number"`)}
	}
	if _, ok := tic.mutation.TransactionType(); !ok {
		return &ValidationError{Name: "transaction_type", err: errors.New(`ent: missing required field "TravelItem.transaction_type"`)}
	}
	if _, ok := tic.mutation.ProductType(); !ok {
		return &ValidationError{Name: "product_type", err: errors.New(`ent: missing required field "TravelItem.product_type"`)}
	}
	if _, ok := tic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TravelItem.status"`)}
	}
	if v, ok := tic.mutation.Status(); ok {
		if err := travelitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TravelItem.status": %w`, err)}
		}
	}
	if _, ok := tic.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "TravelItem.invoice"`)}
	}
	return nil
}

func (tic *TravelItemCreate) sqlSave(ctx context.Context) (*TravelItem, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := tic.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TravelItemCreate) createSpec() (*TravelItem, *sqlgraph.CreateSpec, error) {
	var (
		_node = &TravelItem{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(travelitem.Table, sqlgraph.NewFieldSpec(travelitem.FieldID, field.TypeInt))
	)
	if value, ok := tic.mutation.TotalPrice(); ok {
		vv, err := travelitem.ValueScanner.TotalPrice.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(travelitem.FieldTotalPrice, field.TypeFloat64, vv)
		_node.TotalPrice = value
	}
	if value, ok := tic.mutation.Itinerary(); ok {
		_spec.SetField(travelitem.FieldItinerary, field.TypeString, value)
		_node.Itinerary = value
	}
	if value, ok := tic.mutation.TravelerName(); ok {
		_spec.SetField(travelitem.FieldTravelerName, field.TypeString, value)
		_node.TravelerName = value
	}
	if value, ok := tic.mutation.TicketNumber(); ok {
		_spec.SetField(travelitem.FieldTicketNumber, field.TypeString, value)
		_node.TicketNumber = value
	}
	if value, ok := tic.mutation.ConjunctionNumber(); ok {
		_spec.SetField(travelitem.FieldConjunctionNumber, field.TypeInt, value)
		_node.ConjunctionNumber = value
	}
	if value, ok := tic.mutation.TransactionType(); ok {
		_spec.SetField(travelitem.FieldTransactionType, field.TypeString, value)
		_node.TransactionType = value
	}
	if value, ok := tic.mutation.ProductType(); ok {
		_spec.SetField(travelitem.FieldProductType, field.TypeString, value)
		_node.ProductType = value
	}
	if value, ok := tic.mutation.Status(); ok {
		_spec.SetField(travelitem.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tic.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travelitem.InvoiceTable,
			Columns: []string{travelitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.id_invoice = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// TravelItemCreateBulk is the builder for creating many TravelItem entities in bulk.
type TravelItemCreateBulk struct {
	config
	err      error
	builders []*TravelItemCreate
}

// Save creates the TravelItem entities in the database.
func (ticb *TravelItemCreateBulk) Save(ctx context.Context) ([]*TravelItem, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TravelItem, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TravelItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TravelItemCreateBulk) SaveX(ctx context.Context) []*TravelItem {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TravelItemCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TravelItemCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
